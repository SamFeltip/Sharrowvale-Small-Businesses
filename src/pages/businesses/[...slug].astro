---
// import "@/styles/business-content.css";

import { getImage } from "astro:assets";
import { getCollection, render, type CollectionEntry } from "astro:content";
import GoogleMap from "@/components/businesses/GoogleMap.astro";
import LightBox from "@/components/businesses/LightBox.tsx";
import type { SlideImage } from "yet-another-react-lightbox";

import { getEntries } from "astro:content";
import ContentLayout from "@/layouts/ContentLayout.astro";
import HeaderContent from "@/components/HeaderContent.astro";
import Button from "@/components/elements/Button.vue";
import H2 from "@/components/elements/headers/H2.astro";
import P from "@/components/elements/body/P.vue";
import PlaceCardGrid from "@/components/placeCards/PlaceCardGrid.vue";
import { getPlaceCardsFromBusinesses } from "@/scripts/placeCard/handler";
import BlogContentCollectionItem from "@/components/elements/contentCollectionWrapper/BlogContentCollectionItem.astro";
import Section from "@/components/elements/sections/FloatSection.astro";
import ScreenWidth from "@/components/elements/ScreenWidth.vue";
import Socials from "@/components/businesses/Socials.astro";
import PromotedTags from "@/components/elements/promos/PromotedTags.astro";
import { getPlaceCardRefs } from "@/scripts/placeCard/genericPlaceCard/getPlaceCardRefs";
import Table from "@/components/businesses/table.astro";

export async function getStaticPaths() {
    const businesses: CollectionEntry<"businesses">[] =
        await getCollection("businesses");
    return businesses.map((business) => ({
        params: { slug: business.id },
        props: business,
    }));
}

type Props = CollectionEntry<"businesses">;

const entry: Props = Astro.props;
const {
    name,
    preview,
    description,
    bannerImage,
    heroImage,
    streetAddress,
    additionalImages,
    yearEstablished,
    tags,
    openDaysStatement,
    websiteLink,
    facebookLink,
    instagramLink,
    businessContacts,
    openHours,
} = entry.data;

const { Content } = await render(entry);

const slides: SlideImage[] = await Promise.all(
    additionalImages.map(async (slide: ImageMetadata) => {
        const image = await getImage({ src: slide });

        return {
            src: image.src,
        };
    })
);

const businesses: CollectionEntry<"businesses">[] =
    await getCollection("businesses");

function similarTags(a: CollectionEntry<"businesses">) {
    const categorySlugs = new Set(tags.map((tag) => tag.id));

    return a.data.tags.filter((item) => categorySlugs.has(item.id));
}

function similarCategories(
    a: CollectionEntry<"businesses">,
    b: CollectionEntry<"businesses">
) {
    return similarTags(b).length - similarTags(a).length;
}

const similarListings = businesses.sort(similarCategories).slice(1, 4);

const similarPlaceCards = await getPlaceCardsFromBusinesses(similarListings);

similarPlaceCards.forEach(
    (placeCard) =>
        (placeCard.content =
            placeCard.content && placeCard.content.length > 120
                ? placeCard.content?.substring(0, 120) + "..."
                : placeCard.content)
);

const heroImageResult = await getImage({
    src: heroImage,
    format: "webp",
});

const heroImageSrc = heroImageResult.src;

const tagEntries: CollectionEntry<"tags">[] = await getEntries(tags);

const promoTags = tagEntries.filter((tag) => tag.data.isVisible);

const promoTagRefs = getPlaceCardRefs("tags", promoTags);

const headerBottom = [];

if (openDaysStatement !== null) {
    headerBottom.push(openDaysStatement);
}

if (yearEstablished !== null) {
    headerBottom.push(`Est. ${yearEstablished}`);
}
---

<ContentLayout
    image={bannerImage}
    title={name}
    description={preview}
    headerTop={[tagEntries[0].data.name]}
    headerBottom={headerBottom}
    HeaderContent={HeaderContent}
>
    <ScreenWidth>
        <div>
            <div data-pagefind-meta="content[data-src]" data-src={preview}>
            </div>
        </div>

        <article data-pagefind-body id="business-content" class="grid">
            <div data-pagefind-sort="title" class="hidden">
                <p>{name}</p>
            </div>
            <img
                data-pagefind-meta="image[src], image_alt[alt]"
                src={heroImageSrc}
                alt="hero image"
                class="hidden"
            />

            <Section floatIn={true} id="description">
                <P classList="text-xl" position="center">{description}</P>
            </Section>

            <Section floatIn={true} id="images">
                <LightBox slides={slides} client:load />
            </Section>

            <Section id="tables" floatIn={true}>
                <Table title="Open hours" tableData={openHours} />
                <Table title="Business Contacts" tableData={businessContacts} />
            </Section>

            <Section floatIn={true} id="article-content-grid">
                <BlogContentCollectionItem>
                    <Content />
                </BlogContentCollectionItem>
            </Section>

            <Section floatIn={true} id="map">
                <GoogleMap address={streetAddress} title={name} />
            </Section>

            <Section floatIn={true} id="promoted-tags">
                <PromotedTags promotedItems={promoTagRefs} />

                <div class="hidden" data-pagefind-filter="category:Directory">
                </div>
            </Section>

            <Section floatIn={true} id="socials">
                <Socials
                    instagramLink={instagramLink}
                    websiteLink={websiteLink}
                    facebookLink={facebookLink}
                />
            </Section>

            <Section floatIn={true} pagefindIgnore={true} id="similar-listings">
                <H2 color="coral" position="center">Similar listings</H2>

                <div
                    class="grid grid-cols-1 gap-8 sm:grid-cols-2 md:grid-cols-3"
                >
                    {similarPlaceCards.map((ap) => <PlaceCardGrid {...ap} />)}
                </div>
            </Section>

            <Section floatIn={true} id="back-to-results">
                <a
                    class="flex justify-center text-center underline"
                    href="/categories/directory"
                >
                    Back to results
                </a>
            </Section>
        </article>
    </ScreenWidth>
</ContentLayout>

<style>
    :global(#back-to-results) {
        grid-area: back-to-results;
    }

    :global(#description) {
        grid-area: description;
    }

    :global(#images) {
        grid-area: images;
    }

    :global(#article-content-grid) {
        grid-area: article-content-grid;
    }

    :global(#map) {
        grid-area: map;
    }

    :global(#promoted-tags) {
        grid-area: promoted-tags;
    }

    :global(#socials) {
        grid-area: socials;
    }

    :global(#similar-listings) {
        grid-area: similar-listings;
    }

    :global(#tables) {
        grid-area: tables;
    }

    :global(#business-content) {
        grid-template-columns: 1fr;
        gap: 1rem;

        grid-template-areas:
            "description"
            "images"
            "tables"
            "article-content-grid"
            "map"
            "promoted-tags"
            "socials"
            "similar-listings"
            "back-to-results";
    }

    @media screen and (min-width: 768px) {
        :global(#business-content) {
            grid-template-columns: 1fr 2fr;

            grid-template-areas:
                "map description"
                "map images"
                "tables images"
                "tables article-content-grid"
                "socials article-content-grid"
                ". promoted-tags"
                "similar-listings similar-listings"
                "back-to-results back-to-results";
        }
    }
</style>
