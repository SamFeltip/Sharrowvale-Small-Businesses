---
import HeaderContent from "@/components/HeaderContent.astro";
import ContentLayout from "@/layouts/ContentLayout.astro";
import {
    getCollection,
    getEntries,
    render,
    type CollectionEntry,
} from "astro:content";
import { Image } from "astro:assets";
import Button from "@/components/elements/Button.vue";
import SerifBody from "@/components/elements/body/SerifBody.astro";
import H3 from "@/components/elements/headers/H3.vue";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faInstagram } from "@fortawesome/free-brands-svg-icons/faInstagram";
import { faLink } from "@fortawesome/free-solid-svg-icons/faLink";
import { faFacebook } from "@fortawesome/free-brands-svg-icons/faFacebook";
import LargePromotionalItem from "@/components/businesses/LargePromotionalItem.astro";
import { getEntry } from "astro:content";
import type { PlaceCard } from "@/components/placeCards/PlaceCard";
import {
    getPlaceCardsFromArticles,
    getPlaceCardsFromBusinesses,
} from "@/scripts/placeCard/handler";
import PlaceCardWide from "@/components/placeCards/PlaceCardWide.vue";
import ContentCollectionItem from "@/components/elements/contentCollectionWrapper/ContentCollectionItem.astro";
import H2 from "@/components/elements/headers/H2.astro";
import Section from "@/components/elements/sections/FloatSection.astro";
import ScreenWidth from "@/components/elements/ScreenWidth.vue";
import PromotedTags from "@/components/elements/promos/PromotedTags.astro";
import { getPlaceCardRefs } from "@/scripts/placeCard/genericPlaceCard/getPlaceCardRefs";
import Socials from "@/components/businesses/Socials.astro";

export async function getStaticPaths() {
    const article: CollectionEntry<"articles">[] =
        await getCollection("articles");
    return article.map((articles) => ({
        params: { slug: articles.id },
        props: articles,
    }));
}

type Props = CollectionEntry<"articles">;

const entry: Props = Astro.props;
const {
    name,
    description,
    categories,
    tags,
    bannerImage,
    heroImage,
    author,
    promotedBusiness,
} = entry.data;

const { Content } = await render(entry);

const categoryItems = await getEntries(categories);

const tagItems = await getEntries(tags);

const promoTagRefs = getPlaceCardRefs("tags", tagItems);

let promotedCard: PlaceCard | undefined = undefined;

if (promotedBusiness !== undefined) {
    const promoBusinessEntry = await getEntry(
        "businesses",
        promotedBusiness.id
    );

    if (promoBusinessEntry === undefined) {
        throw new Error("Promoted business not found");
    }

    let promotedCards = await getPlaceCardsFromBusinesses(
        [promoBusinessEntry],
        900
    );
    promotedCard = promotedCards[0];
}

const moreArticles = await getCollection(
    "articles",
    (article) => article.id !== entry.id
);

const articlePages = await getPlaceCardsFromArticles(moreArticles);
---

<ContentLayout
    title={name}
    description="Sharrow Vale Blog"
    image={bannerImage}
    HeaderContent={HeaderContent}
>
    <ScreenWidth>
        <div id="pagefind-metadata">
            <h1 class="hidden" data-pagefind-sort="title">{name}</h1>
            <p
                class="hidden"
                data-pagefind-meta="content[data-src]"
                data-src={description}
            >
            </p>
            <Image
                class="hidden"
                data-pagefind-meta="image[src], image_alt[alt]"
                src={heroImage}
                alt={name}
            />

            {
                categoryItems.map((category) => (
                    <p class="hidden" data-pagefind-filter="category">
                        {category.data.name}
                    </p>
                ))
            }
        </div>

        <div data-pagefind-body id="article">
            <section id="article-content">
                <ContentCollectionItem>
                    <Content />
                </ContentCollectionItem>
            </section>

            <aside class="flex flex-col gap-4">
                <section id="article-promotion">
                    {
                        promotedCard !== undefined && (
                            <div class="h-[400px]">
                                <LargePromotionalItem card={promotedCard} />
                            </div>
                        )
                    }
                </section>

                <section
                    id="article-tags"
                    class="flex flex-col items-center gap-2 pb-6 md:items-end"
                >
                    <PromotedTags
                        title="Article Tags"
                        pagefindMetadata="tags"
                        size="sm"
                        promotedItems={promoTagRefs}
                    />
                </section>

                <section
                    id="article-author"
                    class="flex flex-col items-center gap-2 pb-6 md:items-end"
                >
                    <H3 color="coral">Contributors</H3>
                    <SerifBody position="center">{author}</SerifBody>
                </section>

                <section
                    id="article-share"
                    class="flex flex-col items-center gap-2 md:items-end"
                >
                    <H3 color="coral">Share</H3>

                    <Socials
                        instagramLink={"#instagram"}
                        websiteLink={"#website"}
                        facebookLink={"#facebook"}
                    />
                </section>
            </aside>

            <Section
                id="article-more"
                pagefindIgnore={true}
                classList="items-center"
            >
                <H2 position="center" color="coral"> More Articles</H2>
                <div
                    class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3"
                >
                    {
                        articlePages &&
                            articlePages.map((article) => (
                                <PlaceCardWide {...article} />
                            ))
                    }
                </div>
            </Section>
        </div>
    </ScreenWidth>
</ContentLayout>

<style>
    #article {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    #article-content {
        grid-area: content;
    }

    aside {
        grid-area: aside;
    }

    :global(#article-more) {
        grid-area: more;
    }

    @media screen and (min-width: 48rem) {
        #article {
            display: grid;
            gap: 2rem;
            grid-template-columns: 2fr 1fr;

            grid-template-areas:
                "content aside"
                "more more";
        }
    }
</style>
