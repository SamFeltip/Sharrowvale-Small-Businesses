---
import HeaderContent from "@/components/HeaderContent.astro";
import ContentPromotions from "@/components/content/ContentPromotions.astro";
import Button from "@/components/elements/Button.vue";
import ScreenWidth from "@/components/elements/ScreenWidth.astro";
import ContentCollectionItem from "@/components/elements/contentCollectionWrapper/ContentCollectionItem.astro";
import H2 from "@/components/elements/headers/H2.astro";
import PromoBanner from "@/components/elements/promos/PromoBanner.vue";
import PromotedTags from "@/components/elements/promos/PromotedTags.astro";
import Section from "@/components/elements/section.astro";
import SearchWrapper from "@/components/search/SearchWrapper.vue";
import ContentLayout from "@/layouts/ContentLayout.astro";
import { getPlaceCardsFromBusinesses } from "@/scripts/placeCard/handler";
import { getEntry } from "astro:content";
import { getCollection, getEntries, type CollectionEntry } from "astro:content";

export async function getStaticPaths() {
    const tag: CollectionEntry<"tags">[] = await getCollection("tags");
    return tag.map((business) => ({
        params: { slug: business.slug },
        props: business,
    }));
}

type Props = CollectionEntry<"tags">;

const entry: Props = Astro.props;
const { name, description, bannerImage, promotedBusinesses } = entry.data;

if (bannerImage == null) {
    throw new Error("isPage tags must have banner images");
}

const { Content } = await entry.render();

// Promoted Businesses

const promoBusinesses = await getEntries(promotedBusinesses);

const promoBusinessPlaceCards =
    await getPlaceCardsFromBusinesses(promoBusinesses);

// sorting Tags

const tags = await getCollection("tags", (tag) => !tag.data.isVisible);

const hiddenTags = tags.map((tag) => tag.data.name);

// Promoted Categories

const businesses = await getCollection("businesses", ({ data }) =>
    data.tags.map((tag) => tag.slug).includes(entry.slug)
);

const relatedTags = businesses.map((business) => business.data.tags).flat();

const uniquePromoCategories = Array.from(
    new Set(relatedTags.map((tag) => tag.slug))
);

const promoCategories = await getCollection("tags", (tag) =>
    uniquePromoCategories.includes(tag.slug)
);

const slugCounts: Record<string, number> = relatedTags.reduce(
    (acc, tag) => {
        acc[tag.slug] = (acc[tag.slug] || 0) + 1;
        return acc;
    },
    {} as Record<string, number>
);

const sortedPromoCategories = promoCategories
    .sort((a, b) => slugCounts[b.slug] - slugCounts[a.slug])
    .filter((tag) => slugCounts[tag.slug] < businesses.length - 1);

const isGridLayout = businesses.length >= 9;
---

<ContentLayout
    image={bannerImage}
    title={name}
    description={description}
    classList="gap-8"
    HeaderContent={HeaderContent}
>
    <ScreenWidth>
        <ContentCollectionItem position="center">
            <Content />
        </ContentCollectionItem>
        {
            promoBusinessPlaceCards.length == 4 && (
                <Section>
                    <ContentPromotions
                        promotionPlaceCards={promoBusinessPlaceCards}
                    />
                </Section>
            )
        }
        <SearchWrapper
            client:only="vue"
            requiredCategories={[]}
            requiredTag={name}
            isGridLayout={isGridLayout}
            hiddenTags={hiddenTags}
        />
        {
            promoCategories.length > 0 && (
                <PromotedTags promoCategories={sortedPromoCategories} />
            )
        }
        {isGridLayout && <PromoBanner />}
    </ScreenWidth>
</ContentLayout>
