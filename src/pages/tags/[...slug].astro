---
import HeaderContent from "@/components/HeaderContent.astro";
import ContentPromotions from "@/components/content/ContentPromotions.astro";
import Button from "@/components/elements/Button.vue";
import ContentCollectionItem from "@/components/elements/contentCollectionWrapper/ContentCollectionItem.astro";
import H2 from "@/components/elements/headers/H2.astro";
import PromoBanner from "@/components/elements/promos/PromoBanner.vue";
import PromotedTags from "@/components/elements/promos/PromotedTags.astro";
import Section from "@/components/elements/section.astro";
import SearchWrapper from "@/components/search/SearchWrapper.vue";
import ContentLayout from "@/layouts/ContentLayout.astro";
import { getPlaceCardsFromBusinesses } from "@/scripts/placeCard/handler";
import { getEntry } from "astro:content";
import { getCollection, getEntries, type CollectionEntry } from "astro:content";

export async function getStaticPaths() {
    const tag: CollectionEntry<"tags">[] = await getCollection(
        "tags",
        (tag) => tag.data.isPage
    );
    return tag.map((business) => ({
        params: { slug: business.slug },
        props: business,
    }));
}

type Props = CollectionEntry<"tags">;

const entry: Props = Astro.props;
const { name, description, bannerImage, promotedBusinesses, relatedTags } =
    entry.data;

if (bannerImage == null) {
    throw new Error("isPage tags must have banner images");
}

const { Content } = await entry.render();

const promoBusinesses = await getEntries(promotedBusinesses);

const promoBusinessPlaceCards =
    await getPlaceCardsFromBusinesses(promoBusinesses);

const promoCategories = await getEntries(relatedTags);

const tags = await getCollection("tags", (tag) => !tag.data.isVisible);

const hiddenTags = tags.map((tag) => tag.data.name);

const businesses = await getCollection("businesses", ({ data }) =>
    data.tags.map((tag) => tag.slug).includes(entry.slug)
);

const isGridLayout = businesses.length >= 6;

const directoryCategory = await getEntry("categories", "directory");

if (directoryCategory == null) {
    throw new Error("Directory category not found");
}
---

<ContentLayout
    image={bannerImage}
    title={name}
    description={description}
    classList="gap-8"
    HeaderContent={HeaderContent}
>
    <ContentCollectionItem position="center">
        <Content />
    </ContentCollectionItem>

    {
        promoBusinessPlaceCards.length == 4 && (
            <Section>
                <ContentPromotions
                    promotionPlaceCards={promoBusinessPlaceCards}
                />
            </Section>
        )
    }

    <SearchWrapper
        client:only="vue"
        requiredCategories={[]}
        requiredTag={name}
        isGridLayout={isGridLayout}
        hiddenTags={hiddenTags}
    />

    {
        promoCategories.length > 0 && (
            <PromotedTags promoCategories={promoCategories} />
        )
    }

    {isGridLayout && <PromoBanner />}
</ContentLayout>
