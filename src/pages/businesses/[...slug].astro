---
import "@/styles/business-content.css";

import { getImage } from "astro:assets";
import { getCollection, type CollectionEntry } from "astro:content";
import GoogleMap from "@/components/businesses/GoogleMap.astro";
import LightBox from "@/components/businesses/LightBox.tsx";
import type { SlideImage } from "yet-another-react-lightbox";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

import { faLink } from "@fortawesome/free-solid-svg-icons/faLink";
import { faFacebook } from "@fortawesome/free-brands-svg-icons/faFacebook";
import { faInstagram } from "@fortawesome/free-brands-svg-icons/faInstagram";
import { getEntries } from "astro:content";
import ContentLayout from "@/layouts/ContentLayout.astro";
import HeaderContent from "@/components/HeaderContent.astro";
import Button from "@/components/elements/Button.vue";
import H2 from "@/components/elements/headers/H2.astro";
import PlaceCardGrid from "@/components/placeCards/PlaceCardGrid.vue";
import type { PlaceCard } from "@/components/placeCards/PlaceCard";

export async function getStaticPaths() {
    const businesses: CollectionEntry<"businesses">[] =
        await getCollection("businesses");
    return businesses.map((business) => ({
        params: { slug: business.slug },
        props: business,
    }));
}

type Props = CollectionEntry<"businesses">;

const entry: Props = Astro.props;
const {
    name,
    preview,
    description,
    bannerImage,
    heroImage,
    streetAddress,
    additionalImages,
    tags,
    websiteLink,
    facebookLink,
    instagramLink,
} = entry.data;

const { Content } = await entry.render();

const slides: SlideImage[] = await Promise.all(
    additionalImages.map(async (slide: ImageMetadata) => {
        const image = await getImage({ src: slide });

        return {
            src: image.src,
        };
    })
);

const businesses: CollectionEntry<"businesses">[] =
    await getCollection("businesses");

function similarTags(a: CollectionEntry<"businesses">) {
    const categorySlugs = new Set(tags.map((tag) => tag.slug));

    return a.data.tags.filter((item) => categorySlugs.has(item.slug)).length;
}

function similarCategories(
    a: CollectionEntry<"businesses">,
    b: CollectionEntry<"businesses">
) {
    return similarTags(a) - similarTags(b);
}

const similarListings = businesses.sort(similarCategories).slice(0, 3);

const similarPlaceCards: PlaceCard[] = await Promise.all(
    similarListings.map(async (item) => {
        const image = await getImage({
            src: item.data.heroImage,
            width: 400,
            height: 400,
        });

        return {
            title: item.data.name,
            image: image.src,
            href: `/businesses/${item.slug}`,
        };
    })
);

const heroImageResult = await getImage({
    src: heroImage,
    format: "webp",
});

const heroImageSrc = heroImageResult.src;

let tagItems = await getEntries(tags);

tagItems = tagItems.filter((tag) => tag.data.isVisible);
---

<ContentLayout
    image={bannerImage}
    title={name}
    description={preview}
    HeaderContent={HeaderContent}
>
    <div>
        <div data-pagefind-meta="content[data-src]" data-src={preview}></div>
    </div>

    <article data-pagefind-body>
        <div data-pagefind-sort="name" class="hidden">
            {name}
        </div>
        <img
            data-pagefind-meta="image[src], image_alt[alt]"
            src={heroImageSrc}
            alt="hero image"
            class="hidden"
        />

        <!--pagefind: /_astro/hero.BDRIXm_V_2rU2u7.webp -->

        <!-- correct: /_image?href=%2F%40fs%2FUsers%2Fsamfelton%2FDocuments%2FCode%2FPersonal%2FSharrowvale-Small-Businesses%2Fsrc%2Fassets%2Fimages%2Fbusinesses%2Fcask-and-keg%2Fhero.webp%3ForigWidth%3D3024%26origHeight%3D4032%26origFormat%3Dwebp&f=webp -->

        <section>
            {description}
        </section>

        <section>
            <LightBox slides={slides} client:load />
        </section>

        <section id="article-content-grid">
            <Content />
        </section>

        <section>
            <GoogleMap address={streetAddress} title={name} />
        </section>

        <section>
            <div class="flex flex-row flex-wrap gap-5 justify-center">
                {
                    instagramLink && (
                        <Button href={instagramLink}>
                            <span>
                                <FontAwesomeIcon
                                    className="h-5 w-5"
                                    icon={faInstagram}
                                />
                            </span>
                        </Button>
                    )
                }

                {
                    websiteLink && (
                        <Button href={websiteLink}>
                            <span>
                                <FontAwesomeIcon
                                    className="h-5 w-5"
                                    icon={faLink}
                                />
                            </span>
                        </Button>
                    )
                }
                {
                    facebookLink && (
                        <Button href={facebookLink}>
                            <span>
                                <FontAwesomeIcon
                                    className="h-5 w-5"
                                    icon={faFacebook}
                                />
                            </span>
                        </Button>
                    )
                }
            </div>
        </section>

        <section>
            {
                tagItems && (
                    <div class="flex flex-col items-center">
                        <div class="flex flex-wrap gap-2 mt-4 justify-center w-[60%]">
                            {tagItems.map((tag) => (
                                <>
                                    <data
                                        class="hidden"
                                        data-pagefind-filter="tags"
                                    >
                                        {tag.data.name}
                                    </data>
                                    <Button
                                        href={
                                            tag.data.isPage &&
                                            tag.data.isVisible
                                                ? `/tags/${tag.slug}`
                                                : undefined
                                        }
                                        disabled={tag.data.isPage == false}
                                        data-pagefind-filter="tags"
                                    >
                                        {tag.data.name}
                                    </Button>
                                </>
                            ))}
                        </div>
                    </div>
                )
            }
            <div class="hidden" data-pagefind-filter="category:Directory"></div>
        </section>

        <section>
            <a
                class="underline text-center flex justify-center"
                href="/tags/directory"
            >
                Back to results
            </a>
        </section>

        <section data-pagefind-ignore>
            <H2 color="coral" position="center">Similar listings</H2>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                {similarPlaceCards.map((ap) => <PlaceCardGrid {...ap} />)}
            </div>
        </section>
    </article>
</ContentLayout>
