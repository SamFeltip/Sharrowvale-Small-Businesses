---
// import "@/styles/business-content.css";

import { getImage } from "astro:assets";
import { getCollection, render, type CollectionEntry } from "astro:content";
import GoogleMap from "@/components/businesses/GoogleMap.astro";
import LightBox from "@/components/businesses/LightBox.tsx";
import type { SlideImage } from "yet-another-react-lightbox";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

import { faLink } from "@fortawesome/free-solid-svg-icons/faLink";
import { faFacebook } from "@fortawesome/free-brands-svg-icons/faFacebook";
import { faInstagram } from "@fortawesome/free-brands-svg-icons/faInstagram";
import { getEntries } from "astro:content";
import ContentLayout from "@/layouts/ContentLayout.astro";
import HeaderContent from "@/components/HeaderContent.astro";
import Button from "@/components/elements/Button.vue";
import H2 from "@/components/elements/headers/H2.astro";
import P from "@/components/elements/body/P.vue";
import PlaceCardGrid from "@/components/placeCards/PlaceCardGrid.vue";
import { getPlaceCardsFromBusinesses } from "@/scripts/placeCard/handler";
import BlogContentCollectionItem from "@/components/elements/contentCollectionWrapper/BlogContentCollectionItem.astro";
import Section from "@/components/elements/sections/FloatSection.astro";
import ScreenWidth from "@/components/elements/ScreenWidth.vue";

export async function getStaticPaths() {
    const businesses: CollectionEntry<"businesses">[] =
        await getCollection("businesses");
    return businesses.map((business) => ({
        params: { id: business.id },
        props: business,
    }));
}

type Props = CollectionEntry<"businesses">;

const entry: Props = Astro.props;
const {
    name,
    preview,
    description,
    bannerImage,
    heroImage,
    streetAddress,
    additionalImages,
    yearEstablished,
    tags,
    openDaysStatement,
    websiteLink,
    facebookLink,
    instagramLink,
} = entry.data;

const { Content } = await render(entry);

const slides: SlideImage[] = await Promise.all(
    additionalImages.map(async (slide: ImageMetadata) => {
        const image = await getImage({ src: slide });

        return {
            src: image.src,
        };
    })
);

const businesses: CollectionEntry<"businesses">[] =
    await getCollection("businesses");

function similarTags(a: CollectionEntry<"businesses">) {
    const categorySlugs = new Set(tags.map((tag) => tag.id));

    return a.data.tags.filter((item) => categorySlugs.has(item.id));
}

function similarCategories(
    a: CollectionEntry<"businesses">,
    b: CollectionEntry<"businesses">
) {
    return similarTags(b).length - similarTags(a).length;
}

const similarListings = businesses.sort(similarCategories).slice(1, 4);

const similarPlaceCards = await getPlaceCardsFromBusinesses(similarListings);

similarPlaceCards.forEach(
    (placeCard) =>
        (placeCard.content =
            placeCard.content && placeCard.content.length > 120
                ? placeCard.content?.substring(0, 120) + "..."
                : placeCard.content)
);

const heroImageResult = await getImage({
    src: heroImage,
    format: "webp",
});

const heroImageSrc = heroImageResult.src;

const tagEntries: CollectionEntry<"tags">[] = await getEntries(tags);

const promoTags = tagEntries.filter((tag) => tag.data.isVisible);

const headerBottom = [];

if (openDaysStatement !== null) {
    headerBottom.push(openDaysStatement);
}

if (yearEstablished !== null) {
    headerBottom.push(`Est. ${yearEstablished}`);
}
---

<ContentLayout
    image={bannerImage}
    title={name}
    description={preview}
    headerTop={[tagEntries[0].data.name]}
    headerBottom={headerBottom}
    HeaderContent={HeaderContent}
>
    <ScreenWidth>
        <div>
            <div data-pagefind-meta="content[data-src]" data-src={preview}>
            </div>
        </div>

        <article data-pagefind-body class="flex flex-col gap-6 md:gap-10">
            <div data-pagefind-sort="title" class="hidden">
                <p>{name}</p>
            </div>
            <img
                data-pagefind-meta="image[src], image_alt[alt]"
                src={heroImageSrc}
                alt="hero image"
                class="hidden"
            />

            <!--pagefind: /_astro/hero.BDRIXm_V_2rU2u7.webp -->

            <!-- correct: /_image?href=%2F%40fs%2FUsers%2Fsamfelton%2FDocuments%2FCode%2FPersonal%2FSharrowvale-Small-Businesses%2Fsrc%2Fassets%2Fimages%2Fbusinesses%2Fcask-and-keg%2Fhero.webp%3ForigWidth%3D3024%26origHeight%3D4032%26origFormat%3Dwebp&f=webp -->

            <section>
                <P classList="text-xl" position="center">{description}</P>
            </section>

            <section>
                <LightBox slides={slides} client:load />
            </section>

            <section id="article-content-grid">
                <BlogContentCollectionItem>
                    <Content />
                </BlogContentCollectionItem>
            </section>

            <section>
                <GoogleMap address={streetAddress} title={name} />
            </section>

            <section>
                {
                    promoTags && (
                        <div class="flex flex-col items-center">
                            <div class="mt-4 flex flex-wrap justify-center gap-2">
                                {promoTags.map((tag) => (
                                    <Button
                                        type="hover-coral"
                                        href={
                                            tag.data.isVisible
                                                ? `/tags/${tag.id}`
                                                : undefined
                                        }
                                        data-pagefind-filter="tags"
                                    >
                                        {tag.data.name}
                                    </Button>
                                ))}
                            </div>
                        </div>
                    )
                }
                <div class="hidden" data-pagefind-filter="category:Directory">
                </div>
            </section>

            <section>
                <div class="flex flex-row flex-wrap justify-center gap-5">
                    {
                        instagramLink && (
                            <Button
                                shape="circle"
                                size="lg"
                                href={instagramLink}
                            >
                                <span>
                                    <FontAwesomeIcon
                                        className="h-5 w-5"
                                        icon={faInstagram}
                                    />
                                </span>
                            </Button>
                        )
                    }

                    {
                        websiteLink && (
                            <Button shape="circle" size="lg" href={websiteLink}>
                                <span>
                                    <FontAwesomeIcon
                                        className="h-5 w-5"
                                        icon={faLink}
                                    />
                                </span>
                            </Button>
                        )
                    }
                    {
                        facebookLink && (
                            <Button
                                shape="circle"
                                size="lg"
                                href={facebookLink}
                            >
                                <span>
                                    <FontAwesomeIcon
                                        className="h-5 w-5"
                                        icon={faFacebook}
                                    />
                                </span>
                            </Button>
                        )
                    }
                </div>
            </section>

            <Section pagefindIgnore={true}>
                <H2 color="coral" position="center">Similar listings</H2>

                <div
                    class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3"
                >
                    {similarPlaceCards.map((ap) => <PlaceCardGrid {...ap} />)}
                </div>
            </Section>

            <section>
                <a
                    class="flex justify-center text-center underline"
                    href="/categories/directory"
                >
                    Back to results
                </a>
            </section>
        </article>
    </ScreenWidth>
</ContentLayout>
