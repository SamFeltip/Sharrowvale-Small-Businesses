---
type Props = {
    direction?: "column" | "row";
    classList?: string;
    id?: string;
    pagefindIgnore?: boolean;
    floatIn?: boolean;
};

const props: Props = Astro.props;

const { direction = "column", id, pagefindIgnore, floatIn } = props;

const flexDirection =
    direction == "column" ? "flex-col" : "flex-col md:flex-row";
---

<section
    data-float={floatIn}
    data-pagefind-ignore={pagefindIgnore}
    id={id}
    class:list={[
        "w-full flex align-items gap-6 md:gap-10",
        flexDirection,
        props.classList,
    ]}
>
    <slot />
</section>

<script>
    const sections = document.querySelectorAll("[data-float]");
    console.log("calling section");

    if (!sections) {
        console.error("No section found");
    }
    console.log("section", sections);

    sections.forEach((section) => {
        section.classList.add("opacity-0");
        section.classList.add("transition-all");
        section.classList.add("translate-y-[100px]");
        section.classList.add("duration-700");
        section.classList.add("ease-in-out");
    });

    const observerOptions = {
        root: null,
    };

    const sectionObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                entry.target.classList.add("opacity-100");
                entry.target.classList.remove("opacity-0");
                entry.target.classList.remove("translate-y-[100px]");

                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);

    sections.forEach((section) => {
        sectionObserver.observe(section);
    });
</script>
