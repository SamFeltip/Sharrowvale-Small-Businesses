---
import HeaderContent from "@/components/HeaderContent.astro";
import ContentPromotions from "@/components/content/ContentPromotions.astro";
import ScreenWidth from "@/components/elements/ScreenWidth.astro";
import ContentCollectionItem from "@/components/elements/contentCollectionWrapper/ContentCollectionItem.astro";
import PromoBanner from "@/components/elements/promos/PromoBanner.vue";
import PromotedTags from "@/components/elements/promos/PromotedTags.astro";
import Section from "@/components/elements/section.astro";
import SearchWrapper from "@/components/search/SearchWrapper.vue";
import ContentLayout from "@/layouts/ContentLayout.astro";
import { getPlaceCardsFromBusinesses } from "@/scripts/placeCard/handler";
import { getPromotedTags } from "@/scripts/tags/promotedTags";
import { getCollection, getEntries, type CollectionEntry } from "astro:content";

export async function getStaticPaths() {
    const tag: CollectionEntry<"tags">[] = await getCollection("tags");
    return tag.map((business) => ({
        params: { slug: business.slug },
        props: business,
    }));
}

type Props = CollectionEntry<"tags">;

const entry: Props = Astro.props;
const { name, description, bannerImage, promotedBusinesses } = entry.data;

if (bannerImage == null) {
    throw new Error("isPage tags must have banner images");
}

const { Content } = await entry.render();

// Promoted Businesses

const promoBusinesses = await getEntries(promotedBusinesses);

const promoBusinessPlaceCards =
    await getPlaceCardsFromBusinesses(promoBusinesses);

const tags = await getCollection("tags", (tag) => !tag.data.isVisible);

const hiddenTagNames = tags.map((tag) => tag.data.name);

const businesses = await getCollection("businesses", ({ data }) =>
    data.tags.map((tag) => tag.slug).includes(entry.slug)
);

const promotedTags = await getPromotedTags(businesses);

const isGridLayout = businesses.length >= 9;
---

<ContentLayout
    image={bannerImage}
    title={name}
    description={description}
    HeaderContent={HeaderContent}
>
    <ScreenWidth classList="gap-8">
        <Section floatIn={true}>
            <ContentCollectionItem position="center">
                <Content />
            </ContentCollectionItem>
        </Section>
        {
            promoBusinessPlaceCards.length == 4 && (
                <Section floatIn={true}>
                    <ContentPromotions
                        promotionPlaceCards={promoBusinessPlaceCards}
                    />
                </Section>
            )
        }
        <Section floatIn={true}>
            <SearchWrapper
                client:only="vue"
                requiredCategories={[]}
                requiredTag={name}
                isGridLayout={isGridLayout}
                hiddenTags={hiddenTagNames}
            />
        </Section>
        {
            promotedTags.length > 0 && (
                <PromotedTags promoCategories={promotedTags} />
            )
        }
        {isGridLayout && <PromoBanner />}
    </ScreenWidth>
</ContentLayout>
