---
import { getImage } from "astro:assets";
import { getCollection, render, type CollectionEntry } from "astro:content";
import GoogleMap from "@/components/businesses/GoogleMap.astro";
import LightBox from "@/components/businesses/LightBox.tsx";

import { getEntries } from "astro:content";
import ContentLayout from "@/layouts/ContentLayout.astro";
import HeaderContent from "@/components/HeaderContent.astro";
import P from "@/components/elements/body/P.vue";
import BlogContentCollectionItem from "@/components/elements/contentCollectionWrapper/BlogContentCollectionItem.astro";
import Section from "@/components/elements/sections/FloatSection.astro";
import ScreenWidth from "@/components/elements/ScreenWidth.vue";
import Socials from "@/components/businesses/Socials.astro";
import PromotedTags from "@/components/elements/promos/PromotedTags.astro";
import { getPlaceCardRefs } from "@/scripts/placeCard/genericPlaceCard/getPlaceCardRefs";
import Tables from "@/components/businesses/Tables.astro";
import SimilarListings from "@/components/pages/businesses/SimilarListings.astro";
import { getImageHelper } from "@/scripts/images/getImageHelper";

export async function getStaticPaths() {
    const businesses: CollectionEntry<"businesses">[] = await getCollection(
        "businesses",
        (b) => b.data.hidden === false || b.data.hidden === undefined
    );

    return businesses.map((business) => ({
        params: { slug: business.id },
        props: business,
    }));
}

type Props = CollectionEntry<"businesses">;

const entry: Props = Astro.props;
const {
    name,
    preview,
    description,
    bannerImage,
    heroImage,
    streetAddress,
    additionalImages,
    yearEstablished,
    tags,
    openDaysStatement,
    websiteLink,
    facebookLink,
    instagramLink,
} = entry.data;

const { Content } = await render(entry);

const slides = await Promise.all(
    additionalImages.map(
        async (slide: ImageMetadata) => await getImageHelper(slide)
    )
);

const heroImageResult = await getImage({
    src: heroImage,
    format: "webp",
});

const heroImageSrc = heroImageResult.src;

const tagEntries: CollectionEntry<"tags">[] = await getEntries(tags);

const promoTags = tagEntries.filter((tag) => tag.data.isVisible);

const promoTagRefs = getPlaceCardRefs("tags", promoTags);

const headerBottom: string[] = [];

if (openDaysStatement !== undefined) {
    headerBottom.push(openDaysStatement);
}

if (yearEstablished !== undefined) {
    headerBottom.push(`Est. ${yearEstablished}`);
}
---

<ContentLayout
    image={bannerImage}
    title={name}
    description={preview}
    headerTop={[tagEntries[1].data.name]}
    headerBottom={headerBottom}
    HeaderContent={HeaderContent}
>
    <ScreenWidth classList="gap-6">
        <div class="hidden">
            <div data-pagefind-meta="content[data-src]" data-src={preview}>
            </div>
        </div>

        <article
            data-pagefind-body
            id="business-content"
            class="align-content-start grid grid-cols-1 gap-x-10 gap-y-6 lg:grid-cols-[1fr_2fr]"
        >
            <div data-pagefind-sort="title" class="hidden">
                <p>{name}</p>
            </div>
            <img
                data-pagefind-meta="image[src], image_alt[alt]"
                src={heroImageSrc}
                alt="hero image"
                class="hidden"
            />
            <aside class="flex flex-col gap-x-10 gap-y-6">
                <Section floatIn={true}>
                    <GoogleMap address={streetAddress} title={name} />
                </Section>

                <Section id="tables" floatIn={true} classList="hidden lg:flex">
                    <Tables {...entry.data} />
                </Section>

                <Section floatIn={true} id="socials">
                    <Socials
                        instagramLink={instagramLink}
                        websiteLink={websiteLink}
                        facebookLink={facebookLink}
                    />
                </Section>

                <Section
                    floatIn={true}
                    id="promoted-tags"
                    classList="items-center"
                >
                    <PromotedTags
                        pagefindMetadata="tags"
                        size="sm"
                        side="center"
                        promotedItems={promoTagRefs}
                    />
                    <div class="hidden" data-pagefind-filter="category">
                        Directory
                    </div>
                </Section>
            </aside>

            <Section floatIn={true} id="description">
                <P classList="text-xl" position="center">{description}</P>
            </Section>
            <Section floatIn={true} id="images">
                <LightBox slides={slides} client:load />
            </Section>
            <Section id="tables" floatIn={true} classList="flex lg:hidden">
                <Tables {...entry.data} />
            </Section>
            <Section floatIn={true} id="article-content-grid">
                <BlogContentCollectionItem>
                    <Content />
                </BlogContentCollectionItem>
            </Section>
            <Section floatIn={true} id="back-to-results">
                <a
                    class="flex justify-center text-center underline"
                    href="/categories/directory"
                >
                    Back to results
                </a>
            </Section>
            <Section
                floatIn={true}
                pagefindIgnore={true}
                id="similar-listings"
                classList="lg:pt-8 items-center"
            >
                <SimilarListings businessTags={tags} title="Similar Listings" />
            </Section>
        </article>
    </ScreenWidth>
</ContentLayout>

<style>
    :global(#back-to-results) {
        grid-area: back-to-results;
    }

    :global(#description) {
        grid-area: description;
    }

    :global(#images) {
        grid-area: images;
    }

    :global(#article-content-grid) {
        grid-area: article-content-grid;
    }

    :global(aside) {
        grid-area: aside;
    }

    :global(#similar-listings) {
        grid-area: similar-listings;
    }

    #business-content {
        grid-template-columns: 1fr;
        grid-template-rows: auto auto auto 1fr;

        grid-template-areas:
            "description"
            "images"
            "tables"
            "article-content-grid"
            "aside"
            "similar-listings"
            "back-to-results";
    }

    @media screen and (min-width: 64rem) {
        #business-content {
            grid-template-columns: 1fr 2fr;

            grid-template-areas:
                "aside description"
                "aside images"
                "aside article-content-grid"
                "aside back-to-results"
                "similar-listings similar-listings";
        }
    }
</style>
