---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import GoogleMap from "@/components/places/GoogleMap.astro";
import LightBox from "@/components/places/LightBox.tsx";
import type { SlideImage } from "yet-another-react-lightbox";
import PlaceCard from "@/components/places/PlaceCard.astro";
import { Button } from "@/components/ui/button";

export async function getStaticPaths() {
	const places = await getCollection("places");
	return places.map((place) => ({
		params: { slug: place.slug },
		props: place,
	}));
}

type Props = CollectionEntry<"places">;

const entry: Props = Astro.props;
const {
	title,
	description,
	type,
	heroImage,
	longitude,
	latitude,
	additionalImages,
} = entry.data;

const slides: SlideImage[] = additionalImages.map((slide: string) => ({
	src: slide,
}));

const places: CollectionEntry<"places">[] = await getCollection("places");
const additional_places = places.filter(
	(x) => x.data.type === type && x.data.title != title,
);

console.log(additional_places.length);
---

<Layout>
	<style>
		@keyframes parallax-background {
			to {
				transform: translateY(200px);
			}
		}

		@keyframes parallax-foreground {
			from {
				transform: translateY(-200px);
			}
		}
		@supports (animation-timeline: --parallax-background) {
			@media (prefers-reduced-motion: no-preference) {
				#parallax-background {
					view-timeline-name: --parallax-background;
				}

				#hero-image {
					animation: parallax-background both;
					animation-timing-function: ease-in-out;

					animation-timeline: --parallax-background;
					animation-range: 60% 120%;
				}

				#parallax-foreground {
					view-timeline-name: --parallax-foreground;
				}

				#place-content {
					animation: parallax-foreground both;
					animation-timing-function: ease-in-out;

					animation-timeline: --parallax-foreground;
					animation-range: 0% 120%;
				}
			}
		}
	</style>

	<article class="py-[3rem] px-[1rem] mb-5">
		<div class="h-[350px]" id="parallax-background">
			<img
				id="hero-image"
				class="rounded-3xl w-full h-[500px] object-cover sticky"
				src={heroImage}
				alt="hero image"
			/>
		</div>
		<div id="parallax-foreground">
			<div id="place-content" class="flex flex-col gap-6 mx-8 mb-5">
				<section
					class="gap-12
							bg-white
							rounded-[40px]
							flex
							flex-col
							justify-center
							items-center
							max-w-[1200px]
							mt-0
							p-[3.5rem] p-y-[3rem] pb-[4.5rem] static"
				>
					<div class="prose">
						<div class="title grid gap-[24px]">
							<p class="uppercase text-center">
								<span data-pagefind-filter="type">{type}</span>
							</p>
							<h1
								class="color-coral text-center font-merriweather font-bold text-coral text-[3rem] text-balance"
							>
								{title}
							</h1>
							<section>
								<p>{description}</p>
							</section>
							<section>
								<LightBox slides={slides} client:load />
							</section>
							<section>
								<!-- <Body /> -->
							</section>
						</div>
					</div>
				</section>
				<section>
					<GoogleMap
						longitude={longitude}
						latitude={latitude}
						title={title}
					/>
				</section>
				<section>
					<h2
						class="color-coral text-center font-merriweather text-coral text-2xl line-height-relaxed"
					>
						Similar listings
					</h2>

					<div class="grid grid-cols-3 gap-4">
						{additional_places.map((ap) => <PlaceCard {...ap} />)}
					</div>
				</section>

				<div class="flex justify-center align-center">
					<a
						href="/places"
						role="button"
						class="border text-gray bg-transparent rounded-full justify-center items-center px-4 py-2 font-serif text-base no-underline flex hover:bg-black hover:text-cream"
					>
						Back to results
					</a>
				</div>
			</div>
		</div>
	</article>
</Layout>
